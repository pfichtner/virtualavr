name: Docker Image CI

on:
  workflow_dispatch:
  schedule:
  # each first day of month
  - cron: "0 0 1 * *"
  push:
  pull_request:

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set DOCKER_IMAGE_TAG env var
      run: echo "DOCKER_IMAGE_TAG=$(date +'%s-snapshot')" >> $GITHUB_ENV
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag pfichtner/virtualavr:$DOCKER_IMAGE_TAG
      env:
        TAG: ${{ steps.date.outputs.timestamp }}-snapshot
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: 11
        distribution: 'adopt'
        cache: maven
    - name: Run java based integration tests via maven
      run: mvn -B -DTESTCONTAINERS_HUB_IMAGE_NAME_PREFIX=localhost -Dvirtualavr.docker.tag=$DOCKER_IMAGE_TAG '-Dtest=com.github.pfichtner.virtualavr.virtualavrtests.*IT' verify --file pom.xml
      working-directory: demo/java/sketchtest

    - name: Run java demo
      run: mvn -B -DTESTCONTAINERS_HUB_IMAGE_NAME_PREFIX=localhost -Dvirtualavr.docker.tag=$DOCKER_IMAGE_TAG -Dvirtualavr.sketchfile=../../../test-artifacts/ino-file/trafficlight/trafficlight.ino '-Dtest=com.github.pfichtner.virtualavr.demo.TrafficLightTest' verify --file pom.xml
      working-directory: demo/java/sketchtest

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r demo/python/requirements.txt

    - name: Run python based integration tests via pytest (ino-file)
      env:
        DOCKER_IMAGE_TAG: ${{ env.DOCKER_IMAGE_TAG }}
        SKETCH_FILE: test-artifacts/ino-file/trafficlight/trafficlight.ino
      run: |
        pytest demo/python -v --junit-xml=demo/python/ino-file/test-results/pytest.xml
    - name: Run python based integration tests via pytest (hex-file)
      env:
        DOCKER_IMAGE_TAG: ${{ env.DOCKER_IMAGE_TAG }}
        SKETCH_FILE: test-artifacts/hex-file/trafficlight.ino.hex 
      run: |
        pytest demo/python -v --junit-xml=demo/python/hex-file/test-results/pytest.xml
    - name: Run python based integration tests via pytest (wokwi-zip)
      env:
        DOCKER_IMAGE_TAG: ${{ env.DOCKER_IMAGE_TAG }}
        SKETCH_FILE: test-artifacts/wokwi-zip/project.zip
      run: |
        pytest demo/python -v --junit-xml=demo/python/wokwi-zip/test-results/pytest.xml

    - name: Run python/gherkin based integration tests via pytest (ino-file)
      env:
        DOCKER_IMAGE_TAG: ${{ env.DOCKER_IMAGE_TAG }}
        SKETCH_FILE: test-artifacts/ino-file/trafficlight/trafficlight.ino
      run: |
        behave --junit --junit-directory demo/python-gherkin/test-results demo/python-gherkin
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: (success() || failure()) && github.event_name != 'pull_request'  # run this step even if previous step failed
      with:
        name: JUnit Tests
        path: demo/java/sketchtest/target/surefire-reports/*.xml,demo/python/*/test-results/pytest.xml,demo/python-gherkin/test-results/TESTS-*_behavior.xml
        reporter: java-junit

